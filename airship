airship = {
	configFile = "airship.conf",
	buttons = { }
}

local airship_mt = class( airship )

function airship:new( )
	return setmetatable( { }, airship_mt )
end

function airship:run( )
	local event = { }
	local tFilter = { }
	local exit = false
	local repeatFlag = false
	local repeatDir, repeatNum, repeatCounter
	self.sizeX, self.sizeY = term.getSize( )

	utils.debug( "Starting Airship Control, click this monitor to exit" )

	local airshipConfig = config:new( self.configFile )
	if not airshipConfig:load( ) then
		utils.debug( "Airship: error loading config file" )
		return
	end

	self.xmitSide = airshipConfig:get( "xmitSide" )
	self.wallpaperPath = airshipConfig:get( "wallpaperPath" )
	self.up = airshipConfig:get( "up" )
	self.down = airshipConfig:get( "down" )
	self.north = airshipConfig:get( "north" )
	self.east = airshipConfig:get( "east" )
	self.south = airshipConfig:get( "south" )
	self.west = airshipConfig:get( "west" )

	self.northLauncher = airshipConfig:get( "northLauncher" )
	self.westLauncher = airshipConfig:get( "westLauncher" )
	self.southLauncher = airshipConfig:get( "southLauncher" )

	self.northRail = airshipConfig:get( "northRail" )
	self.eastRail = airshipConfig:get( "eastRail" )
	self.southRail = airshipConfig:get( "southRail" )
	self.westRail = airshipConfig:get( "westRail" )

	self.northGrenade = airshipConfig:get( "northGrenade" )
	self.eastGrenade = airshipConfig:get( "eastGrenade" )
	self.southGrenade = airshipConfig:get( "southGrenade" )
	self.westGrenade = airshipConfig:get( "westGrenade" )

	-- load wallpaper if available
	if fs.exists( self.wallpaperPath ) then
		self.wallpaper = paintutils.loadImage( self.wallpaperPath )
		if wallpaper == nil then
			utils.debug( "Airship: error reading wallpaper file" )
		end
	else
		utils.debug( "Airship: specified wallpaper not found" )
	end
	
	table.insert( self.buttons, button:new( 5, 19, "Exit",
		function( )
			utils.debug( "Airship: exit button clicked" )
			exit = true
		end
	))

	table.insert( self.buttons, button:new( 22, 24, "Up", 
		function( )
			self:move( self.up, "up" ) 
		end
	))
	table.insert( self.buttons, button:new( 20, 28, "Down", 
		function( )
			self:move( self.down, "down" ) 
		end
	))
	table.insert( self.buttons, button:new( 36, 22, "North", 
		function( )
			self:move( self.north, "north" ) 
		end
	))
	table.insert( self.buttons, button:new( 44, 26, "East", 
		function( )
			self:move( self.east, "east" ) 
		end
	))
	table.insert( self.buttons, button:new( 36, 30, "South", 
		function( )
			self:move( self.south, "south" )
		end
	))
	table.insert( self.buttons, button:new( 29, 26, "West", 
		function( )
			self:move( self.west, "west" )
		end
	))
	table.insert( self.buttons, button:new( 36, 26, "Stop ", 
		function( )
			self.repeatFlag = false
		end
	))
	table.insert( self.buttons, button:new( 44, 22, "North x100",
		function( )
			self.repeatFlag = true
			self.repeatDir = self.north
			self.repeatCounter = 0
			self.repeatNum = 100
		end
	))
	table.insert( self.buttons, button:new( 44, 30, "West x1000",
		function( )
			self.repeatFlag = true
			self.repeatDir = self.west
			self.repeatCounter = 0
			self.repeatNum = 1000
		end
	))

	-- Fire control
	table.insert( self.buttons, button:new( 31, 3, "North",
		function( )
			self:pulse( self.northLauncher )
		end
	))
	table.insert( self.buttons, button:new( 39, 3, "South",
		function( )
			self:pulse( self.southLauncher )
		end
	))
	table.insert( self.buttons, button:new( 47, 3, "West",
		function( )
			self:pulse( self.westLauncher )
		end
	))
	table.insert( self.buttons, button:new( 54, 3, "Fire All",
		function( )
			self:pulse( self.northLauncher )
			self:pulse( self.southLauncher )
			self:pulse( self.westLauncher )
		end
	))

	table.insert( self.buttons, button:new( 31, 7, "North",
		function( )
			self:pulse( self.northRail )
		end
	))
	table.insert( self.buttons, button:new( 39, 7, "East",
		function( )
			self:pulse( self.eastRail )
		end
	))
	table.insert( self.buttons, button:new( 46, 7, "South",
		function( )
			self:pulse( self.southRail )
		end
	))
	table.insert( self.buttons, button:new( 54, 7, "West",
		function( )
			self:pulse( self.westRail )
		end
	))
	table.insert( self.buttons, button:new( 61, 7, "Fire All",
		function( )
			self:pulse( self.northRail )
			self:pulse( self.eastRail )
			self:pulse( self.southrail )
			self:pulse( self.westRail )
		end
	))

	table.insert( self.buttons, button:new( 31, 11, "North",
		function( )
			self:pulse( self.northGrenade )
		end
	))
	table.insert( self.buttons, button:new( 39, 11, "East",
		function( )
			self:pulse( self.eastGrenade )
		end
	))
	table.insert( self.buttons, button:new( 46, 11, "South",
		function( )
			self:pulse( self.southGrenade )
		end
	))
	table.insert( self.buttons, button:new( 54, 11, "West",
		function( )
			self:pulse( self.westGrenade )
		end
	))
	table.insert( self.buttons, button:new( 61, 11, "Fire All",
		function( )
			self:pulse( self.northGrenade )
			self:pulse( self.eastGrenade )
			self:pulse( self.southGrenade )
			self:pulse( self.westGrenade )
		end
	))

	table.insert( self.buttons, button:new( 32, 15, "!!!FIRE EVERYTHING!!!",
		function( )
			self:fireAll( )
		end
	))
	
	for i,n in ipairs( self.buttons ) do
		local x,y,xmax,ymax = n:getBounds( )
		utils.debug( "Airship: button created: (" .. x .. "," .. y .. ")->(" .. xmax .. "," .. ymax ..")" )
	end

	term.clear( )

	while not exit do
		self:drawScreen( )
		os.startTimer( 1 )
		local event, side, clickX, clickY = os.pullEventRaw( )

		if self.repeatFlag == true then
			self:move( self.repeatDir, "on autopilot" )
			self.repeatCounter = self.repeatCounter + 1
			if self.repeatCounter >= self.repeatNum then
				self.repeatFlag = false
			end
		end

		if event == "monitor_touch" then
			if side == monMain then
				utils.debug( "Airship: monitor_touch event")
				for j,k in ipairs( self.buttons ) do
					local x1, y1, x2, y2 = k:getBounds( )
					if clickX >= x1 and clickX <= x2 and clickY >= y1 and clickY <=y2 then
						k:click( )
					end
				end
			elseif side == monDebug then
				utils.debug( "Airship: debug monitor_touch event, exiting" )
				exit = true
			else
				utils.debug( "Airship: monitor_touch event on unknown monitor" )
			end
		elseif event == "terminate" then
			utils.debug( "Airship: exiting airship control" )
			exit = true
		elseif event ~= "timer" then
			utils.debug( "Airship: Unhandled event: " .. event )
		end
	end

end

function airship:drawScreen( )
	term.clear( )
	utils.setTextDefaults( )

	if self.wallpaper ~= nil then
		paintutils.drawImage( self.wallpaper, self.sizeX/2, self.sizeY/2 )
		utils.setTextDefaults( )
	end

	term.setCursorPos( 34, 20 )
	term.write( "Airship Movement" )

	term.setCursorPos( 34, 1 )
	term.write( "Launch Controls" )
	
	term.setCursorPos( 21, 4)
	term.write( "Missiles" )

	term.setCursorPos( 21, 8 )
	term.write( "Railguns" )

	term.setCursorPos( 21, 12 )
	term.write( "Grenades" )

	for j,k in ipairs( self.buttons ) do
		k:draw( )
	end
	term.setCursorPos( 1, 1 )
end

function airship:move( dir, str )
	utils.debug( "Airship: moving " .. str .. "[" .. self.xmitSide .. "]" )
	peripheral.call( self.xmitSide, "setFreq", dir )
	redstone.setOutput( self.xmitSide, true )
	sleep( 1.5 )
	redstone.setOutput( self.xmitSide, false )
end

function airship:pulse( freq )
	peripheral.call( self.xmitSide, "setFreq", freq )
	redstone.setOutput( self.xmitSide, true )
	sleep( 2 )
	redstone.setOutput( self.xmitSide, false )
end

function airship:fireAll( )
	self:pulse( self.northLauncher )
	self:pulse( self.southLauncher )
	self:pulse( self.westLauncher )

	self:pulse( self.northRail )
	self:pulse( self.northGrenade )
	self:pulse( self.eastRail )
	self:pulse( self.eastGrenade )
	self:pulse( self.southRail )
	self:pulse( self.southGrenade )
	self:pulse( self.westRail )
	self:pulse( self.westGrenade )
end