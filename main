dofile( "class" )
dofile( "api/button" )
dofile( "airship" )

-- TODO: move config to file
monMain = "left"
monDebug = "top"
local wallpaperPath = "/wallpaper"
local splashPath = "/logo"
local timeout = 10 -- screensaver timeout
-- end config

local b = { }
local exit = false
local wallpaper = nil
local splash = nil
local sizeX, sizeY

function drawDesktop( )
	term.clear( )
	-- draw wallpaper
	if wallpaper ~= nil then
		paintutils.drawImage( wallpaper, sizeX/3, sizeY/3 )
	end
	-- draw widgets
	utils.setTextDefaults( )
	utils.clock( )
	-- draw buttons
	for i,n in ipairs( b ) do
		n:draw( )
	end
	-- other stuff
	term.setCursorPos( 1, 1 )
end

function writeConsole( str )
	local x, y = term.getSize( )
	term.setCursorPos( 1, y )
	term.write( str )
	term.scroll( 1 )
	term.setCursorPos( 1, y )
end

-- check for required peripherals

if not term.isColor( ) then
	print( "An advanced computer is required." )
	return
end

if peripheral.getType( monMain ) ~= "monitor" then
	print( "Main monitor not attached to '" .. monMain .. "'" )
	return
end

if peripheral.getType( monDebug ) ~= "monitor" then
	print( "Debug monitor not attached to '" .. monDebug .. "'" )
	return
end

term.setTextColor( colors.red )
term.setBackgroundColor( colors.black )
term.clear( )
writeConsole( ">>> DOS Starting Up..." )
writeConsole( ">>> Hold CTRL+T to return to console" )

mon = peripheral.wrap( "left" )
mon.setTextScale( 0.5 )
term.redirect( mon )
sizeX, sizeY = term.getSize( )

local missing = 0
if not os.loadAPI( "api/utils" ) then missing = 1 end

if missing == 1 then
	print( "A required API is missing." )
	return
end

utils.debugInit( )
utils.init( )

-- display splash screen
if fs.exists( splashPath ) then
	splash = paintutils.loadImage( splashPath )
	if splash == nil then
		utils.debug( "Error reading splash screen file" )
	else
		term.clear( )
		paintutils.drawImage( splash, sizeX/3, sizeY/3 )
		sleep( 5 )
	end
else
	utils.debug( "Specified splash screen not found" )
end

-- attempt to load wallpaper
if fs.exists( wallpaperPath ) then
	wallpaper = paintutils.loadImage( wallpaperPath )
	if wallpaper == nil then
		utils.debug( "Error reading wallpaper file" )
	end
else
	utils.debug( "Specified wallpaper not found" )
end

local airshipcontrol = airship:new( )

table.insert( b, button:new( 20, 12, "Airship", 
	function( )
		airshipcontrol:run( )
	end 
) )

table.insert( b, button:new( 20, 16, "Paint", 
	function ( )
		utils.debug( "Starting Paint program, click this monitor to exit" )
		local cr = coroutine.create( 
			function( )
				shell.run( "paint", "/testimage" )
			end
		)

		local event = { }
		local tFilter = { }

		mon.setTextScale( 1 )
		while true do
			if event[1] == "monitor_touch" then
				if event[2] == monMain then
					--utils.debug( "monitor_touch -> mouse_click" )
					os.queueEvent( "mouse_click", 1, unpack( event, 3 ) )
				elseif event[2] == monDebug then
					utils.debug( "Debug monitor clicked, exiting" )
					break
				end
			end

			local ok, param = coroutine.resume( cr, unpack( event ) )
			if not ok then
				utils.debug( "Paint error: " .. param )
				break
			else
				tFilter = param
			end

			if coroutine.status( cr ) == "dead" then
				utils.debug ( "Paint coroutine died" )
				break
			end

			event = { os.pullEventRaw( ) }
		end
		mon.setTextScale( 0.5 )
		--shell.run( "/rom/programs/monitor", "left", "/rom/programs/color/paint", "/image" )
	end 
) )
table.insert( b, button:new( 20, 20, "Reboot", 
	function ( )
		utils.debug( "Reboot button clicked" )
		sleep( 1 )
		os.reboot( )
	end
) )
table.insert( b, button:new( 20, 24, "Exit", 
	function( ) 
		utils.debug( "Exit button clicked, terminating" )
		exit = true
	end
) )

local timer = 0

-- draw the home screen
while not exit do
	drawDesktop( )
	os.startTimer( 1 )
	local event, side, clickX, clickY = os.pullEventRaw( )

	term.setCursorPos( 1, 2 )
	if event == "monitor_touch" then
		local touchCoords = "(" .. clickX .. "," .. clickY .. ")"
		if side == monMain then
			utils.debug( "Touchscreen Event: " .. touchCoords )
			for i,n in ipairs( b ) do
				local x1, y1, x2, y2 = n:getBounds( )
				if clickX >= x1 and clickX <= x2 and clickY >= y1 and clickY <= y2 then
					n:click( )
				end
			end
		elseif side == monDebug then
			utils.debug( "Touchscreen event on debug monitor: " .. touchCoords )
		else
			utils.debug( "Touchscreen event on unknown monitor: " .. touchCoords )
		end
	elseif event == "terminate" then
		utils.debug( "Terminating" )
		exit = true
	elseif event ~= "timer" then
		utils.debug( "Event: " .. event )
	end
end

term.restore( )

