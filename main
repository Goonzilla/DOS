colors = require( "colors" )
component = require( "component" )
computer = require( "computer" )
event = require( "event" )
internet = require( "internet" )
fs = require( "filesystem" )
shell = require( "shell" )
term = require( "term" )

--gpu, gpuDebug = nil

dofile( "class" )
dofile( "api/button" )
dofile( "api/config" )
dofile( "api/utils" )

-- parse config file
mainConfig = config:new( "dos.conf" )

if not mainConfig:load( ) then
	print( "Error loading config file" )
	return
end

local wallpaperPath = mainConfig:get( "wallpaperPath" )
local splashPath = mainConfig:get( "splashPath" )
local timeout = mainConfig:get( "timeout" )
-- end config

local b = { }
local exit = false
local wallpaper = nil
local splash = nil
local sizeX, sizeY

function drawDesktop( )
	utils:clear( gpu )
	-- draw wallpaper
	if wallpaper ~= nil then
		--paintutils.drawImage( wallpaper, sizeX/3, sizeY/3 )
	end
	-- draw widgets
	utils:setTextDefaults( gpu )
	utils:clock( gpu )
	-- draw buttons
	for i,n in ipairs( b ) do
		n:draw( gpu )
	end
	-- other stuff
end

-- check for required peripherals

if not term.isAvailable( ) or not component.gpu then
	print( "A graphics card and attached screen are required." )
	return
end

gpu = utils:init( mainConfig )
gpuDebug = utils:debugInit( mainConfig )
utils:writeConsole( gpuDebug, ">>> DOS Starting Up..." )
utils:writeConsole( gpuDebug, ">>> Press Ctrl+Alt+C to return to console" )

-- display splash screen
if utils:checkFile( splashPath ) then
	--[[
	splash = paintutils.loadImage( splashPath )
	if splash == nil then
		utils:writeConsole( "Error reading splash screen file" )
	else
		term.clear( )
		paintutils.drawImage( splash, sizeX/3, sizeY/3 )
		sleep( 5 )
	end
	]]
else
	utils:writeConsole( gpuDebug, "Specified splash screen not found" )
end

-- attempt to load wallpaper
if utils:checkFile( wallpaperPath ) then
	--[[
	wallpaper = paintutils.loadImage( wallpaperPath )
	if wallpaper == nil then
		utils.debug( "Error reading wallpaper file" )
	end
	]]
else
	utils:writeConsole( gpuDebug, "Specified wallpaper not found" )
end

table.insert( b, button:new( 20, 16, "Reactor Monitor", 
	function ( )
		utils:writeConsole( gpuDebug, "Starting Reactor Monitor..." )

		local cr = coroutine.create( 
			function( )
				shell.execute( "/dos/apps/reactor" )
			end
		)

		local signal = { }
		local tFilter = { }

		utils:scaleRes( gpu, 2 )

		while true do
			utils:writeConsole( gpuDebug, "Unpacking event" )
			local e = table.unpack( signal )
			local ok, param = coroutine.resume( cr, e )
			if not ok then
				utils:writeConsole( gpuDebug, "Reactor Monitor error: " .. param )
				break
			else
				tFilter = param
			end

			if coroutine.status( cr ) == "dead" then
				utils:writeConsole( gpuDebug, "Reactor Monitor died." )
				break
			end

			signal = { event.pull( 1, "touch" ) }
		end

		utils:scaleRes( gpu, 1 )

	end 
) )
table.insert( b, button:new( 20, 20, "Reboot", 
	function ( )
		utils:writeConsole( gpuDebug, "Reboot button clicked" )
		os.sleep( 1 )
		computer.shutdown( true )
	end
) )
table.insert( b, button:new( 20, 24, "Exit", 
	function( ) 
		utils:writeConsole( gpuDebug, "Exit button clicked, terminating" )
		exit = true
	end
) )
table.insert( b, button:new( 20, 28, "Update",
	function( )
		utils:writeConsole( gpuDebug, "Update button clicked, running bootstrap" )
		utils:clear( gpu )
		shell.execute( "bootstrap" )
		utils:writeConsole( gpuDebug, "bootstrap returned, rebooting!" )
		os.sleep( 1 )
		computer.shutdown( true )
	end
))

local timer = 0

-- draw the home screen
local signal, e1, e2, e3, e4, e5 = nil

while not exit do
	drawDesktop( )
	
	signal, e1, e2, e3, e4, e5 = event.pull( 1, nil )

	if signal ~= nil then
		utils:writeConsole( gpuDebug, "Signal: " .. signal )

		if signal == "key_down" then
			exit = true
		elseif signal == "touch" then
			local clickX = e2
			local clickY = e3
			local touchCoords = "(" .. clickX .. "," .. clickY .. ")"
			if e1 == component.get( tostring( mainConfig:get( "screenMain" ), "screen" ) ) then
				utils:writeConsole( gpuDebug, "Touchscreen Event: " .. touchCoords )
				for i,n in ipairs( b ) do
					local x1, y1, x2, y2 = n:getBounds( )
					if clickX >= x1 and clickX <= x2 and clickY >= y1 and clickY <= y2 then
						n:click( )
					end
				end
			elseif e1 == component.get( tostring( mainConfig:get( "screenDebug" ), "screen" ) ) then
				utils:writeConsole( gpuDebug, "Touchscreen event on debug monitor: " .. touchCoords )
			else
				utils:writeConsole( gpuDebug, "Touchscreen event on unknown monitor: " .. touchCoords )
				utils:writeConsole( gpuDebug, "id: " .. e1 )
				utils:writeConsole( gpuDebug, "m1: " .. component.get( tostring( mainConfig:get( "gpuMain" ), "gpu" ) ) )
			end
		elseif signal == "terminate" then
			utils:writeConsole( gpuDebug, "Terminating" )
			exit = true
		elseif signal ~= "timer" then
			utils:writeConsole( gpuDebug, "Event: " .. signal )
		end
	end
end

utils:writeConsole( gpuDebug, "Cleaning up..." )
utils:clear( gpu )